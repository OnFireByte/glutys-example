// This file is generated by glutys. DO NOT EDIT.

package routegen

import (
	"encoding/json"
	glutys "github.com/onfirebyte/glutys"
	"net/http"
	reqcontext "server/reqcontext"
	math "server/route/math"
	todolist "server/route/todolist"
)

func TodolistBulkAddHandler(w http.ResponseWriter, r *http.Request, body *glutys.RequestBody) {
	Username0, errUsername0 := reqcontext.ParseUsername(r)
	if errUsername0 != nil {
		response := map[string]interface{}{
			"error": "Invalid Context",
			"msg":   errUsername0.Error(),
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}
	var string1 []*string
	errstring1 := json.Unmarshal(body.Args[0], &string1)
	if errstring1 != nil {
		response := map[string]interface{}{
			"error": "Invalid JSON",
			"msg":   errstring1.Error(),
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}
	res, err := todolist.BulkAdd(Username0, string1)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(map[string]interface{}{
			"error": "Bad Request",
			"msg":   err.Error(),
		})
		return
	}
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(res)
	return
}
func TodolistGetHandler(w http.ResponseWriter, r *http.Request, body *glutys.RequestBody) {
	Username0, errUsername0 := reqcontext.ParseUsername(r)
	if errUsername0 != nil {
		response := map[string]interface{}{
			"error": "Invalid Context",
			"msg":   errUsername0.Error(),
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}
	var int1 int
	errint1 := json.Unmarshal(body.Args[0], &int1)
	if errint1 != nil {
		response := map[string]interface{}{
			"error": "Invalid JSON",
			"msg":   errint1.Error(),
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}
	res := todolist.Get(Username0, int1)
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(res)
	return
}
func TodolistGetAllHandler(w http.ResponseWriter, r *http.Request, body *glutys.RequestBody) {
	Username0, errUsername0 := reqcontext.ParseUsername(r)
	if errUsername0 != nil {
		response := map[string]interface{}{
			"error": "Invalid Context",
			"msg":   errUsername0.Error(),
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}
	res := todolist.GetAll(Username0)
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(res)
	return
}
func TodolistUpdateHandler(w http.ResponseWriter, r *http.Request, body *glutys.RequestBody) {
	Username0, errUsername0 := reqcontext.ParseUsername(r)
	if errUsername0 != nil {
		response := map[string]interface{}{
			"error": "Invalid Context",
			"msg":   errUsername0.Error(),
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}
	var todo1 *todolist.Todo
	errtodo1 := json.Unmarshal(body.Args[0], &todo1)
	if errtodo1 != nil {
		response := map[string]interface{}{
			"error": "Invalid JSON",
			"msg":   errtodo1.Error(),
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}
	res, err := todolist.Update(Username0, todo1)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(map[string]interface{}{
			"error": "Bad Request",
			"msg":   err.Error(),
		})
		return
	}
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(res)
	return
}
func MathFibHandler(w http.ResponseWriter, r *http.Request, body *glutys.RequestBody) {
	var int0 int
	errint0 := json.Unmarshal(body.Args[0], &int0)
	if errint0 != nil {
		response := map[string]interface{}{
			"error": "Invalid JSON",
			"msg":   errint0.Error(),
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}
	res := math.Fib(int0)
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(res)
	return
}
func TodolistAddHandler(w http.ResponseWriter, r *http.Request, body *glutys.RequestBody) {
	Username0, errUsername0 := reqcontext.ParseUsername(r)
	if errUsername0 != nil {
		response := map[string]interface{}{
			"error": "Invalid Context",
			"msg":   errUsername0.Error(),
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}
	var string1 string
	errstring1 := json.Unmarshal(body.Args[0], &string1)
	if errstring1 != nil {
		response := map[string]interface{}{
			"error": "Invalid JSON",
			"msg":   errstring1.Error(),
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}
	var string2 []string
	errstring2 := json.Unmarshal(body.Args[1], &string2)
	if errstring2 != nil {
		response := map[string]interface{}{
			"error": "Invalid JSON",
			"msg":   errstring2.Error(),
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}
	res := todolist.Add(Username0, string1, string2)
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(res)
	return
}

type HandlerFunc func(http.ResponseWriter, *http.Request, *glutys.RequestBody)

var pathMap = map[string]HandlerFunc{
	"math.fib":         MathFibHandler,
	"todolist.add":     TodolistAddHandler,
	"todolist.bulkAdd": TodolistBulkAddHandler,
	"todolist.get":     TodolistGetHandler,
	"todolist.getAll":  TodolistGetAllHandler,
	"todolist.update":  TodolistUpdateHandler,
}

func RouteHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	body := glutys.RequestBody{}
	err := json.NewDecoder(r.Body).Decode(&body)
	if err != nil {
		response := map[string]interface{}{
			"error": "Bad Request",
			"msg":   "Invalid JSON",
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
	}
	handler, ok := pathMap[body.Method]
	if !ok {
		response := map[string]interface{}{
			"error": "Bad Request",
			"msg":   "Invalid method",
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
	}
	handler(w, r, &body)
}
